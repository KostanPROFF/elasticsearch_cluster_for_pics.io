worker_processes auto;

events {

}

http {

  default_type  application/octet-stream;
  include       /etc/nginx/mime.types;

  error_log /etc/nginx/error_log.log;

  server {

    listen 80 default_server;
    
    resolver 127.0.0.11 valid=30s;

    server_name localhost;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    include  /etc/nginx/mime.types;

    location / {
      # We can proxy to some other service or serve some static files here
    }

location /logs/nginx {
    content_by_lua '
        command = "sh /tmp/script.sh"
      local handle = io.popen(command);
      local result = handle:read("*a");
      handle:close();
      ngx.print(result);';
}

location /logs/elasticsearch/1 {
    content_by_lua '
        command = "sh /tmp/script.sh 1"
      local handle = io.popen(command);
      local result = handle:read("*a");
      handle:close();
      ngx.print(result);';
}

location /logs/elasticsearch/2 {
    content_by_lua '
        command = "sh /tmp/script.sh 2"
      local handle = io.popen(command);
      local result = handle:read("*a");
      handle:close();
      ngx.print(result);';
}

location /logs/elasticsearch/3 {
    content_by_lua '
        command = "sh /tmp/script.sh 3"
      local handle = io.popen(command);
      local result = handle:read("*a");
      handle:close();
      ngx.print(result);';
}

    # Kibana
    location /kibana {
     
        #auth_basic "Restricted Access";
        #auth_basic_user_file /etc/nginx/htpasswd.users;

        set $upstream http://kibana:5601;
        proxy_pass $upstream;
        proxy_redirect off;
        proxy_buffering off;

        proxy_http_version 1.1;
        proxy_pass_header Authorization;
        proxy_set_header Connection "Keep-Alive";
        proxy_set_header Proxy-Connection "Keep-Alive";
    }


  }


}